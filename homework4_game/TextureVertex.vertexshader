#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3[20] LightDirections_cameraspace;

uniform int LightSources;
uniform vec3[20] LightPositions_worldspace;

uniform mat4 Projection;
uniform mat4 View;
uniform mat4 Model;

void main() {	
	gl_Position =  Projection * View * Model * vec4(vertexPosition_modelspace, 1);
	Position_worldspace = (Model * vec4(vertexPosition_modelspace, 1)).xyz;

	vec3 vertexPosition_cameraspace = (View * Model * vec4(vertexPosition_modelspace, 1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	for (int i = 0; i < LightSources; ++i) {
		vec3 LightPosition_cameraspace = (View * vec4(LightPositions_worldspace[i], 1)).xyz;
		LightDirections_cameraspace[i] = LightPosition_cameraspace + EyeDirection_cameraspace;	
	}

	Normal_cameraspace = (View * Model * vec4(vertexNormal_modelspace, 0)).xyz;

	UV = vertexUV;
}